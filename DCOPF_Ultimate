                                                    #Packages & Model
from pyomo.environ import *
from pyomo.opt import *
import math

model = AbstractModel()
########################################################################################################################
                                                        #Sets
#Nodes:
model.NODES = Set()
model.SLACK = Set(within=model.NODES)
#Lines:
model.LINES = Set(within=model.NODES*model.NODES)
def NodesOut_init_(model,n):
    for i,j in model.LINES:
        if i == n:
            yield j
model.NodesOut = Set(model.NODES, initialize=NodesOut_init_)
#
def NodesIn_init_(model,n):
    for i,j in model.LINES:
        if j == n:
            yield i
model.NodesIn = Set(model.NODES, initialize=NodesIn_init_)
#Times:
model.TIMES = Set()
#Generators:
model.GENERATORS = Set()
model.BLOCKS = Set()
model.GxN = Set(within=model.GENERATORS*model.NODES)
#VREPs:
model.VREPS = Set()
model.VxN = Set(within=model.VREPS*model.NODES)
model.V_SCENARIOS = Set()
#Demands:
model.RETS = Set()
model.RxN = Set(within=model.RETS*model.NODES)
model.R_SCENARIOS = Set()
########################################################################################################################
                                                        #Parameters
#Lines:
model.X = Param(model.LINES)
model.f_max = Param(model.LINES)
#Generators:
model.P_g_min = Param(model.GENERATORS,model.BLOCKS)
model.P_g_max = Param(model.GENERATORS,model.BLOCKS)
model.Cost_g = Param(model.GENERATORS,model.BLOCKS)
#VREPs:
model.P_VREP_cap = Param(model.VREPS)
model.P_VREP_realized = Param(model.VREPS,model.TIMES,model.V_SCENARIOS)
model.Prob_VREP = Param(model.VREPS,model.TIMES,model.V_SCENARIOS)
#Demands:
model.P_RET = Param(model.RETS,model.TIMES,model.R_SCENARIOS)
model.Prob_RET = Param(model.RETS,model.TIMES,model.R_SCENARIOS)
#Sbase:
model.S_base = Param()
########################################################################################################################
                                                        #Variables
model.P_G = Var(model.GENERATORS,model.BLOCKS,model.TIMES, model.V_SCENARIOS, model.R_SCENARIOS, within=Reals)
model.F = Var(model.LINES,model.TIMES, model.V_SCENARIOS, model.R_SCENARIOS, within=Reals)
model.Teta = Var(model.NODES,model.TIMES,model.V_SCENARIOS, model.R_SCENARIOS, within=Reals)
model.P_VREP = Var(model.VREPS,model.TIMES,model.V_SCENARIOS, model.R_SCENARIOS, within=NonNegativeReals)
########################################################################################################################
                                                #Objective Function
def objective_rule(model):
    return sum(model.Prob_VREP[v,t,vw]*model.Prob_RET[r,t,rw]*model.Cost_g[g,b]*model.P_G[g,b,t,vw,rw] \
               for v in model.VREPS \
               for r in model.RETS \
               for g in model.GENERATORS \
               for b in model.BLOCKS \
               for t in model.TIMES \
               for vw in model.V_SCENARIOS \
               for rw in model.R_SCENARIOS)
model.minCost = Objective(rule=objective_rule, sense=minimize)
########################################################################################################################
                                                        #Constraints
def power_balance_rule(model,n,t,vw,rw):
    return (sum(model.P_G[g,b,t,vw,rw] for g in model.GENERATORS for b in model.BLOCKS if (g,n) in model.GxN) \
            +sum(model.P_VREP[v,t,vw,rw] for v in model.VREPS if (v,n) in model.VxN) \
            +sum(model.F[i,n,t,vw,rw] for i in model.NodesIn[n]) \
            -sum(model.F[n,j,t,vw,rw] for j in model.NodesOut[n]) \
            -sum((model.P_RET[r,t,rw]/model.S_base) for r in model.RETS if (r,n) in model.RxN) \
            )  == 0
model.power_balance_constraint = Constraint(model.NODES, model.TIMES, model.V_SCENARIOS, model.R_SCENARIOS, rule=power_balance_rule)
#
def min_gen_rule(model,g,b,t,vw,rw):
    return (model.P_g_min[g,b]/model.S_base) <= model.P_G[g,b,t,vw,rw]
model.min_gen_constraint = Constraint(model.GENERATORS, model.BLOCKS, model.TIMES, model.V_SCENARIOS, model.R_SCENARIOS, rule=min_gen_rule)
#
def max_gen_rule(model,g,b,t,vw,rw):
    return model.P_G[g,b,t,vw,rw] <= (model.P_g_max[g,b]/model.S_base)
model.max_gen_constraint = Constraint(model.GENERATORS, model.BLOCKS, model.TIMES, model.V_SCENARIOS, model.R_SCENARIOS,rule=max_gen_rule)
#
def vrep_rule(model,v,t,vw,rw):
    return model.P_VREP[v,t,vw,rw] <= (model.P_VREP_realized[v,t,vw]/model.S_base)
model.vrep_constraint = Constraint(model.VREPS, model.TIMES, model.V_SCENARIOS, model.R_SCENARIOS, rule=vrep_rule)
#
def flow_rule(model,i,j,t,vw,rw):
    return model.F[i,j,t,vw,rw] == (model.Teta[i,t,vw,rw] - model.Teta[j,t,vw,rw])/model.X[i,j]
model.flow_constraint = Constraint(model.LINES, model.TIMES, model.V_SCENARIOS, model.R_SCENARIOS, rule=flow_rule)
#
def min_flow_rule(model,i,j,t,vw,rw):
    return -(model.f_max[i,j]/model.S_base) <= model.F[i,j,t,vw,rw]
model.min_flow_constraint = Constraint(model.LINES, model.TIMES, model.V_SCENARIOS, model.R_SCENARIOS, rule=min_flow_rule)
#
def max_flow_rule(model,i,j,t,vw,rw):
    return model.F[i,j,t,vw,rw] <= +(model.f_max[i,j]/model.S_base)
model.max_flow_constraint = Constraint(model.LINES, model.TIMES, model.V_SCENARIOS, model.R_SCENARIOS, rule=max_flow_rule)
#
def min_teta_rule(model,n,t,vw,rw):
    return -math.pi <= model.Teta[n,t,vw,rw]
model.min_teta_constraint = Constraint(model.NODES, model.TIMES, model.V_SCENARIOS, model.R_SCENARIOS, rule=min_teta_rule)
#
def max_teta_rule(model,n,t,vw,rw):
    return model.Teta[n,t,vw,rw] <= +math.pi
model.max_teta_constraint = Constraint(model.NODES, model.TIMES, model.V_SCENARIOS, model.R_SCENARIOS, rule=max_teta_rule)
#
def slack_rule(model,n,t,vw,rw):
    return model.Teta[n,t,vw,rw] == 0
model.slack_constraint = Constraint(model.SLACK, model.TIMES, model.V_SCENARIOS, model.R_SCENARIOS, rule=slack_rule)
#
def non_anticipativity_vrep(model,v,t,vw,rw,vww,rww):
    return model.P_VREP[v,t,vw,rw] == model.P_VREP[v,t,vww,rww]
model.non_anticipativity_generators_constraint = Constraint(model.VREPS, model.TIMES, model.V_SCENARIOS, model.R_SCENARIOS, model.V_SCENARIOS, model.R_SCENARIOS, rule=non_anticipativity_vrep)
#
########################################################################################################################
########################################################################################################################
                                                #Creating a model instance
data = DataPortal()     #read the data
data.load(filename="DCOPF_Ultimate_Data.dat", model=model)   #load the data file
instance = model.create_instance(data) #creating instance
instance.pprint() # printing the instance (you might not need it, because it shows all the constraints and objective function in detail)
########################################################################################################################
########################################################################################################################
                                                    #Running the model
optimizer = SolverFactory("cplex")
results = optimizer.solve(instance)
########################################################################################################################
                                      #Checking solver status and printing results by display()
if (results.solver.status == SolverStatus.ok) and (results.solver.termination_condition == TerminationCondition.optimal):
    print("********************No worries! Code is FINE!********************")
    print("*******************Showing results by display()******************")
    instance.display()
elif (results.solver.termination_condition == TerminationCondition.infeasible) or (results.solver.termination_condition == TerminationCondition.other):
    print("Model is Infeasible. Check constraints.")
else:
    print("Solver Status: ", results.solver.status)
    print("Termination Condition: ", results.solver.termination_condition)
########################################################################################################################
                                                #Showing results by print()
print("*******************************************************************")
print("********************Showing results by print()*********************")
print("###")
print(f"Objective Function: {value(instance.minCost)*instance.S_base.value}")
print("###")
for g in instance.GENERATORS:
   for b in instance.BLOCKS:
        for t in instance.TIMES:
            for vw in instance.V_SCENARIOS:
                for rw in instance.R_SCENARIOS:
                    print(f"P_G({g,b,t,vw,rw})= {value(instance.P_G[g,b,t,vw,rw])*instance.S_base.value}")
print("###")
for v in instance.VREPS:
    for t in instance.TIMES:
        for vw in instance.V_SCENARIOS:
            for rw in instance.R_SCENARIOS:
                print(f"P_VREP({v,t,vw,rw})= {value(instance.P_VREP[v,t,vw,rw])*instance.S_base.value}")
print("###")
for (i,j) in instance.LINES:
    for t in instance.TIMES:
        for vw in instance.V_SCENARIOS:
            for rw in instance.R_SCENARIOS:
                print(f"F(({i},{j}),{t},{vw},{rw})= {value(instance.F[i,j,t,vw,rw])*instance.S_base.value}")
print("###")
for n in instance.NODES:
    for t in instance.TIMES:
        for vw in instance.V_SCENARIOS:
            for rw in instance.R_SCENARIOS:
                print(f"Teta({n,t,vw,rw})= {value(instance.Teta[n,t,vw,rw])}")
print("###")
